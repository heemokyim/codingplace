https://github.com/FEDevelopers/tech.description/wiki/Node.js-Stream-%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC%ED%95%A0-%EB%AA%A8%EB%93%A0-%EA%B2%83
https://nodejs.org/dist/latest-v6.x/docs/api/stream.html#stream_readable_pause

1. 모든 readableStream은 명시적으로 pause mode 되지 않는 이상 flowing mode임

2. read.pipe(write)
==> read becomes flowing mode
==> pushes all data into write stream

3. read.push() == 파일에서 데이터를 읽는 operation
만약 stream이 파일에 걸려있고 flowing mode라면 push 해줄 필요 없음

4. Event 'readable' = readable Stream에 읽을 데이터가 있을 때 발생
	Event 'data' = read에서 write stream으로 데이터를 보낼 때 발생

pause mode = read에서 write로 자동으로 안 감
flowing mode = read에서 write로 자동으로 감

----------------------------------------------------
만약 readable.pipe(writable) 했다면
readable에서 writable로 데이터가 자동으로 가는데,

1. readable은 flowing mode이고

2. pipe 내에서 write()가 발생할 것이다.

readable.on('data',function(data){
	writable.write(data);
})

readable.pipe(writable);

-----------------------------------------------------

ex)	Readable
const readable = getReadableStreamSomehow();
readable.on('readable', () => {
  let chunk;
  while (null !== (chunk = readable.read())) {
    console.log(`Received ${chunk.length} bytes of data.`);
  }
});

ex)	Writable
const { Writable } = require('stream');

const outStream = new Writable({
  write(chunk, encodeing, callback) {
    console.log(chunk.toString());
    callback();
	// Node는 비동기화므로 이 함수가 끝난 후 callback으로 뒷처리
  }
});

process.stdin.pipe(outStream);