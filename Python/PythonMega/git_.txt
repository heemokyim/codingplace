1. My repository 에서 로컬로 부를 때 파일입출력 스트림같은게 있어야 함
==> branch

2. git clone == My repository의 내용을 현재 디렉토리로 복제

3. git pull == My repository의 변경내용을 로컬에 반영함 (당긴다)

4. 특정 브랜치만 보고 싶다.
https://tapaswenipathak.wordpress.com/2014/12/18/clone-all-remote-branches-with-git/
git clone repo.git
cd repo
git branch -a
git checkout -b branch_name

** Ambiguous name 'head'?
== git branch -m HEAD newbranch

5. 서브모듈
	0. 내 repo에 쓸 repo를 fork

	1. fork된 repo로 서브모듈 추가
	git submodule add https:// local_name
	
	2. 서브모듈까지 git에 올리기
	git commit -am 'YOUR_MESSAGE'
	git push origin master
	
	3. git에 있는 서브모듈까지 clone(그 이후에 pull은 알아서 됨)
	git clone url
	git submodule init
	git submodule update
	
	git clone --recurse-submodule url
	
	4. 서브모듈 수정하고 git에 올리기
	서브모듈도 일반 repo 다루듯이 하면 됨
	1. 서브모듈에서 commit 후 push
	2. 부모디렉토리에서 서브모듈 add 후 commit 후 push

	** 만약 서브모듈 수정 후 commit 깜빡해서 안하면 에러나서 다음에 git submodule update가 안됨
	해결책 https://stackoverflow.com/questions/1260748/how-do-i-remove-a-submodule
	ex) a/submodule 이 서브모듈 경로라 치자
	1. git submodule deinit -f -- a/submodule
	2. rm -rf .git/modules/a/submodule
	3. git rm -f a/submodule
	4. git commit 
	5. git push
	

6. 해당 디렉토리에 git을 없애고 싶다
해당 디렉토리에서 git reset

7. 서브모듈을 없애고 싶다
http://aroundck.tistory.com/1180
1. .gitmodules에서 해당 서브모듈 제거
2. .git/config에서 해당 서브모듈 제거
3. git rm --cached path
4. commit
