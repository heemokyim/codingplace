1. it divides work into multiple machines = clustering
Horizontal partitioning

1-1. It computes optimal workflow by making DAG of it's own

2. Driver Program -> Cluster Manager
If default, Spark cluster manager
If Hadoop cluster, YARN cluster manager (in association with AWS elastic MapReduce)

fault tolerance => (Resilience)
    Feature that some machine can still work even though others go down
    

3. Resilient Distributed Dateset = RDD

4. Components of Spark
    a. Spark streaming = real-time analysis
    b. Spark SQL = query for spark, way to treat Spark as data warehouse
    c. MLLIb = Machine Learning Library
    d. GraphX = managing graph information (networks, higher property of graph)
    
5. coding in scala is more faster for spark
    because spark is built with scala
   
==============================================================================   

RDD
Resilient = Keep on going even though one node shuts down
Distributed = running on clusters of multiple computer
Dataset

** We don't need to worry about how it actually works,
because Spark does it for us

** Then What we need to do?
= Transforming Dataset into RDD objects to perform


Transforming RDD
1. map = operations for each datum
2. flatmap = map + capability to produce multiple values
3. filter = trim out
4. distinct = get unique values
5. sample = smaller datasets from given RDD
6. cartesian = all the possible combination between every pair of element in RDD


Actions for RDD
1. countByValue = literally
2. reduce = reduce every data into one scala by given labmda and datasets

Lazy evaluation
    = Nothing really happens until 'Action' get started
    = Once it happens on Spark, it will computes DAG for optimized workflow path
    
==============================================================================   

If modify only values,
use mapValues() and flatMapValues() instead

mapValues() = one to one
flatMapValues() = one to many

** How reduceByKey() works?
    -> Let say we have 1,2,3,4,5,
    then 1+2, (1+2)+3, ((1+2)+3)+4 .. so on




