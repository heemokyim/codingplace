** lecture = https://www.youtube.com/watch?v=v5e_PasMdXc

-----------------------------------------------------------------------------

http://utk-unm.blogspot.kr/2016/08/acid.html

1. CAP
    Consistency, Availability(scalability), Partition-tolerance

    Consistency(일관성)
        = 트렌젝션이 끝난 후에도 데이터베이스가 사용가능한 상태를 유지할 수 있도록 보장하는 특성
        = DB에 저장되는 데이터는 반드시 데이터베이스가 따르는 법칙(테이블스키마 etc)을 따르게 해야 함을 이름
        = 만약 다뤄야하는 데이터가 정형일수록 consistency에 의미부여를 많이 해야 한다
    
    Concurrency 처리(동시성 처리)
        = 트랜젝션이 동시에 수행될 때 DB 일관성을 파괴하지 않도록 하는 조치
    
    Availability = 사용하는데 편하냐, 우리 거에 적용하는데 쉽냐

    Parition-tolerance = resilience
    
-----------------------------------------------------------------------------

scalability = 시간이 지날수록 데이터가 늘어나는 형탠가
            = 다루는 데이터가 애초에 많아서 하나의 node엔 담을 수 없는가
            = 데이터를 클러스터에 확장시킬 수 있는가
            = 자연스럽게 availability와도 연관된다. 클러스터에 데이터를 확장시키려면 결국 available해야 함
            
            
** strong external support = security 관련해서 회사가 지원을 해주는가, 해당 software에 대한 커뮤니티가 활성한가
                            = MongoDB가 이런 면에서 잘 활성화되있다.
                            
-----------------------------------------------------------------------------

CAP triangle에서 어떤 DB에 포함되지 않는 성질이라 해서 반드시 포기해야만 하는 건 아니다.
Cassandra같은 경우 availability에 초점을 두고 있지만 consistency도 가져갈 수 있다.

-----------------------------------------------------------------------------

*** Some random think
1. DB작업할 때 어떤 언어를 써야 하는가
2. 사실 크게 상관없다. DBC 자체가 CPU intensive하지 않아서 어떤 언어를 쓰던 상관없다
3. 쿼리와 관련한 성능문제는 대부분 언어자체의 문제라기보단 DB튜닝의 문제
4. 그래서 생산성 측면에서 본다면 쉬운 언어로 빨리 처리하는게 좋다고 생각함
5. Python으로 DB작업하는게 낫지 않나 싶다